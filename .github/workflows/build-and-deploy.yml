name: Build And Deploy

on: [pull_request]

env:
  DOTNET_VERSION: ${{ vars.DOTNET_VERSION }}

  ARM_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZ_CLIENT_SECRET }}

  TF_BACKEND_STORAGE_ACCOUNT_NAME: ${{ secrets.TF_BACKEND_STORAGE_ACCOUNT_NAME }}
  TF_BACKEND_CONTAINER_NAME: ${{ secrets.TF_BACKEND_CONTAINER_NAME }}
  TF_BACKEND_KEY: ${{ secrets.TF_BACKEND_KEY }}
  TF_BACKEND_RESOURCE_GROUP: ${{ secrets.TF_BACKEND_RESOURCE_GROUP }}

  TF_VAR_dfe_project_name: ${{ vars.DFE_PROJECT_NAME }}
  TF_VAR_az_environment: ${{ secrets.AZ_ENVIRONMENT }}
  TF_VAR_az_location: ${{ vars.AZ_LOCATION }}
  TF_VAR_az_tag_environment: ${{ vars.AZ_TAG_ENVIRONMENT }}
  TF_VAR_az_tag_product: ${{ vars.AZ_TAG_PRODUCT }}

  TF_WORKING_DIRECTORY: ./terraform

jobs:
  build-test-app:  
    name: Build and test     
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Run Terraform fmt
        id: fmt
        uses: docker://hashicorp/terraform:1.4.5
        with: 
          args: -chdir=terraform fmt -check
        continue-on-error: true

      - name: Run Terraform init
        id: init
        uses: docker://hashicorp/terraform:1.4.5
        with:
          working-directory: ./terraform
          entrypoint: terraform
          args: -chdir=terraform init -backend-config="resource_group_name=${{ env.TF_BACKEND_RESOURCE_GROUP }}" -backend-config="storage_account_name=${{ env.TF_BACKEND_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ env.TF_BACKEND_CONTAINER_NAME }}" -backend-config="key=${{ env.TF_BACKEND_KEY }}"
        
      - name: Run Terraform validate
        id: validate
        uses: docker://hashicorp/terraform:1.4.5
        with: 
          args: -chdir=terraform validate -no-color

      - name: Run Terraform plan
        id: plan
        uses: docker://hashicorp/terraform:1.4.5
        with: 
          args: -chdir=terraform plan -no-color

      - name: Read Terraform plan output
        run: echo $(cat terraform.plan)
        working-directory: ${{ env.TF_WORKING_DIRECTORY }}

      # - name: Access Terraform output
      #   run: echo "Terraform output= ${{ env.TERRAFORM_PLAN_OUTPUT }}"
      #   working-directory: ${{ env.TF_WORKING_DIRECTORY }}

      # - name: Access Terraform output
      #   run: echo "Terraform output = ${{ steps.init.outputs }}"

      # - name: Build web app  
      #   uses: ./.github/actions/build-web-app
      #   with:
      #     dotnet_version: ${{ env.DOTNET_VERSION }}  

      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v2
      #     with:
      #       terraform_version: 1.4.5

      # - name: Terraform fmt
      #   id: fmt
      #   run: terraform fmt -check
      #   continue-on-error: true

      # - name: Terraform init
      #   id: init
      #   run: |
      #     terraform init \
      #       -backend-config="resource_group_name=${{ env.TF_BACKEND_RESOURCE_GROUP }}"  \
      #       -backend-config="storage_account_name=${{ env.TF_BACKEND_STORAGE_ACCOUNT_NAME }}"  \
      #       -backend-config="container_name=${{ env.TF_BACKEND_CONTAINER_NAME }}"  \
      #       -backend-config="key=${{ env.TF_BACKEND_KEY }}"
      #   working-directory: ${{ env.TF_WORKING_DIRECTORY }}

      # - name: Terraform Validate
      #   id: validate
      #   run: terraform validate -no-color

      # - name: Terraform plan 
      #   id: plan
      #   run: terraform plan -no-color
      #   working-directory: ${{ env.TF_WORKING_DIRECTORY }}

      - name: Update PR with Terraform results
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })
      
            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
      
            \`\`\`\n
            ${{ steps.validate.outputs }}
            \`\`\`
      
            </details>
      
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.TF_WORKING_DIRECTORY }}\`, Workflow: \`${{ github.workflow }}\`*`;
      
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }