name: Code PR Check 

on:
  push:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'tests/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'tests/**'
      - '.github/workflows/code-pr-check.yml'

env:
  DOTNET_VERSION: ${{ vars.DOTNET_VERSION }}
  
jobs:
  build-test-web-app:  
    name: Build and run unit tests
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install dotnet coverage
        run: dotnet tool install --global dotnet-coverage

      - name: Build web app  
        uses: ./.github/actions/build-dotnet-app
        with:
          dotnet_version: ${{ env.DOTNET_VERSION }}  
          solution_filename: plan-technology-for-your-school.sln

      - name: Run unit tests
        uses: ./.github/actions/run-unit-tests
        with:
          solution_filename: plan-technology-for-your-school.sln

      - name: Merge test results
        run: dotnet-coverage merge -f xml -o "coverage.xml" -s "coverage.settings.xml" -r coverage.cobertura.xml

      - name: SonarQube Scan - CS
        uses: sonarsource/sonarqube-scan-action@master
        env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: "https://sonarcloud.io"
        with:
          args: >
            -Dsonar.cs.vscoveragexml.reportsPaths=coverage.xml

      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cs-coverage-report
          path: coverage.xml

  build-database-upgrader:  
    name: Build database upgrader
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Build database upgrader  
        uses: ./.github/actions/build-dotnet-app
        with:
          dotnet_version: ${{ env.DOTNET_VERSION }}  
          solution_filename: Dfe.PlanTech.DatabaseUpgrader.sln

  run-javascript-tests:
    runs-on: ubuntu-latest
    name: Run javascript tests

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "latest"

      - name: Install Dependencies
        run: npm install

      - name: Run the tests
        run: npm test

      - name: Test report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: JEST Tests            # Name of the check run which will be created
          path: ./junit.xml    # Path to test results
          reporter: jest-junit        # Format of test results

      - name: SonarQube Scan - JS
        uses: sonarsource/sonarqube-scan-action@master
        if: always()
        env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: "https://sonarcloud.io"
        with:
          args: >
            -Dsonar.cs.vscoveragexml.reportsPaths=coverage.xml

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: js-coverage-report
          path: |
            coverage/
            ./junit.xml