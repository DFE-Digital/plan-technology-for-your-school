{
  "version": 3,
  "sources": ["../../scripts/browser-history.mjs", "../../scripts/app.mjs"],
  "sourcesContent": ["const STORAGE_KEY = \"BrowserHistory\";\nexport const DEFAULT_ROUTE = \"/self-assessment\";\nconst BACK_BUTTON_ID = \"back-button-link\";\n\n/**\n * Tracks a users browser history, stores it in local storage, and amends the back button link (if existing on page)\n */\nexport class BrowserHistory {\n    history = [];\n\n    get lastUrl() {\n        if (this.history.length > 0) {\n            return this.history[this.history.length - 1];\n        }\n\n        return DEFAULT_ROUTE;\n    }\n\n    constructor() {\n        this.history = this.getHistory();\n\n        if (!this.ifNavigatingBackwardsRemoveUrl()) {\n            this.amendBackButton();\n            this.addUrl();\n        }\n        else {\n            this.amendBackButton();\n        }\n    }\n\n    /**\n     * Adds current window href to history\n     */\n    addUrl() {\n        this.history.push(window.location.href);\n        this.saveHistory();\n    }\n\n    /**\n     * Checks to see if we are navigating backwards, if so removes URL(s) from history\n     * @returns {boolean} Whether we are naavigating backwards or not\n     */\n    ifNavigatingBackwardsRemoveUrl() {\n        const indexOfHrefInHistory = this.history.findIndex(url => url === window.location.href);\n\n        if (indexOfHrefInHistory == -1 || indexOfHrefInHistory < this.history.length - 2) {\n            return false;\n        }\n\n        this.history = this.history.slice(0, indexOfHrefInHistory);\n        this.saveHistory();\n\n        return true;\n    }\n\n    getHistory() {\n        if (this.shouldClearHistory()) {\n            this.clearHistory();\n        }\n\n        const fromStorage = localStorage.getItem(STORAGE_KEY);\n\n        if (fromStorage) {\n            return JSON.parse(fromStorage);\n        }\n\n        return [];\n    }\n\n    saveHistory() {\n        const stringified = JSON.stringify(this.history);\n        localStorage.setItem(STORAGE_KEY, stringified);\n    }\n\n    clearHistory() {\n        this.history = [];\n        this.saveHistory();\n    }\n\n    /**\n     * Gets the back button link from the page, if it exists amend HREF to be last url in history\n     */\n    amendBackButton() {\n        const backButtonLink = document.getElementById(BACK_BUTTON_ID);\n\n        if (!backButtonLink) {\n            return;\n        }\n\n        backButtonLink.setAttribute(\"href\", this.lastUrl);\n    }\n\n    shouldClearHistory() {\n        return window.location.pathname == \"/\" || window.location.pathname == DEFAULT_ROUTE;\n    }\n\n    getIndexOfHrefInHistory() {\n        for (let x = this.history.length - 1; x >= 0 && x >= this.history.length - 2; x--) {\n            if (window.location.href == this.history[index]) {\n                return x;\n            }\n        }\n\n        return -1;\n    }\n}", "import { BrowserHistory } from \"./browser-history.mjs\";\n\nconst history = new BrowserHistory();"],
  "mappings": "8KAAA,IAAMA,EAAc,iBACPC,EAAgB,mBACvBC,EAAiB,mBAKVC,EAAN,KAAqB,CAWxB,aAAc,CAVdC,EAAA,eAAU,CAAC,GAWP,KAAK,QAAU,KAAK,WAAW,EAE1B,KAAK,+BAA+B,EAKrC,KAAK,gBAAgB,GAJrB,KAAK,gBAAgB,EACrB,KAAK,OAAO,EAKpB,CAlBA,IAAI,SAAU,CACV,OAAI,KAAK,QAAQ,OAAS,EACf,KAAK,QAAQ,KAAK,QAAQ,OAAS,CAAC,EAGxCH,CACX,CAiBA,QAAS,CACL,KAAK,QAAQ,KAAK,OAAO,SAAS,IAAI,EACtC,KAAK,YAAY,CACrB,CAMA,gCAAiC,CAC7B,IAAMI,EAAuB,KAAK,QAAQ,UAAUC,GAAOA,IAAQ,OAAO,SAAS,IAAI,EAEvF,OAAID,GAAwB,IAAMA,EAAuB,KAAK,QAAQ,OAAS,EACpE,IAGX,KAAK,QAAU,KAAK,QAAQ,MAAM,EAAGA,CAAoB,EACzD,KAAK,YAAY,EAEV,GACX,CAEA,YAAa,CACL,KAAK,mBAAmB,GACxB,KAAK,aAAa,EAGtB,IAAME,EAAc,aAAa,QAAQP,CAAW,EAEpD,OAAIO,EACO,KAAK,MAAMA,CAAW,EAG1B,CAAC,CACZ,CAEA,aAAc,CACV,IAAMC,EAAc,KAAK,UAAU,KAAK,OAAO,EAC/C,aAAa,QAAQR,EAAaQ,CAAW,CACjD,CAEA,cAAe,CACX,KAAK,QAAU,CAAC,EAChB,KAAK,YAAY,CACrB,CAKA,iBAAkB,CACd,IAAMC,EAAiB,SAAS,eAAeP,CAAc,EAExDO,GAILA,EAAe,aAAa,OAAQ,KAAK,OAAO,CACpD,CAEA,oBAAqB,CACjB,OAAO,OAAO,SAAS,UAAY,KAAO,OAAO,SAAS,UAAYR,CAC1E,CAEA,yBAA0B,CACtB,QAASS,EAAI,KAAK,QAAQ,OAAS,EAAGA,GAAK,GAAKA,GAAK,KAAK,QAAQ,OAAS,EAAGA,IAC1E,GAAI,OAAO,SAAS,MAAQ,KAAK,QAAQ,KAAK,EAC1C,OAAOA,EAIf,MAAO,EACX,CACJ,ECvGA,IAAMC,EAAU,IAAIC",
  "names": ["STORAGE_KEY", "DEFAULT_ROUTE", "BACK_BUTTON_ID", "BrowserHistory", "__publicField", "indexOfHrefInHistory", "url", "fromStorage", "stringified", "backButtonLink", "x", "history", "BrowserHistory"]
}
