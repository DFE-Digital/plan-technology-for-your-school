{
  "version": 3,
  "sources": ["../../scripts/browser-history.js", "../../scripts/app.js"],
  "sourcesContent": ["const STORAGE_KEY = \"BrowserHistory\";\nexport const DEFAULT_ROUTE = \"/self-assessment\";\nexport const BACK_BUTTON_ID = \"back-button-link\";\n\n/**\n * Tracks a users browser history, stores it in local storage, and amends the back button link (if existing on page)\n */\nexport class BrowserHistory {\n    history = [];\n\n    get lastUrl() {\n        if (this.history.length > 0) {\n            return this.history[this.history.length - 1];\n        }\n\n        return DEFAULT_ROUTE;\n    }\n\n    constructor() {\n        this.history = this.getHistory();\n\n        this.ifNavigatingBackwardsRemoveUrl();\n        this.amendBackButton();\n        this.tryAddUrl();\n    }\n\n    /**\n     * Adds current window href to history\n     */\n    tryAddUrl() {\n        const lastHref = this.history.length > 0 ? this.history[this.history.length - 1] : \"\";\n        if (window.location.href == lastHref) {\n            return;\n        }\n        \n        this.history.push(window.location.href);\n        this.saveHistory();\n    }\n\n    /**\n     * Checks to see if we are navigating backwards, if so removes URL(s) from history\n     * @returns {boolean} Whether we are navigating backwards or not\n     */\n    ifNavigatingBackwardsRemoveUrl() {\n        if (this.history.length == 0) {\n            return false;\n        }\n\n        const lastIndex = this.history.length - 2;\n\n        if (lastIndex < 0) {\n            return false;\n        }\n\n        const navigatingBackwards = this.history[lastIndex] == window.location.href;\n\n        if (!navigatingBackwards) {\n            return false;\n        }\n\n        this.history = this.history.slice(0, lastIndex);\n        this.saveHistory();\n        return true;\n    }\n\n    getHistory() {\n        if (this.shouldClearHistory()) {\n            this.clearHistory();\n        }\n\n        const fromStorage = localStorage.getItem(STORAGE_KEY);\n\n        if (fromStorage) {\n            return JSON.parse(fromStorage);\n        }\n\n        return [];\n    }\n\n    saveHistory() {\n        const stringified = JSON.stringify(this.history);\n        localStorage.setItem(STORAGE_KEY, stringified);\n    }\n\n    clearHistory() {\n        this.history = [];\n        this.saveHistory();\n    }\n\n    /**\n     * Gets the back button link from the page, if it exists amend HREF to be last url in history\n     */\n    amendBackButton() {\n        const backButtonLink = document.getElementById(BACK_BUTTON_ID);\n\n        if (!backButtonLink) {\n            return;\n        }\n\n        backButtonLink.setAttribute(\"href\", this.lastUrl);\n\n        var test = testingDummyMethod(555);\n    }\n\n    shouldClearHistory() {\n        return window.location.pathname == \"/\" || window.location.pathname == DEFAULT_ROUTE;\n    }\n}\n\n\nfunction testingDummyMethod(bool) { \n    if (!bool) {\n        return true;\n    }\n    else if (bool = \"tetere\") {\n        return 17;\n    }\n\n    return false;\n}\n\nconst result = testingDummyMethod(true);\nconst resultFalse = testingDummyMethod(false);\n", "import { BrowserHistory } from \"./browser-history\";\n\nconst history = new BrowserHistory();"],
  "mappings": "8KAAA,IAAMA,EAAc,iBACPC,EAAgB,mBAChBC,EAAiB,mBAKjBC,EAAN,KAAqB,CAWxB,aAAc,CAVdC,EAAA,eAAU,CAAC,GAWP,KAAK,QAAU,KAAK,WAAW,EAE/B,KAAK,+BAA+B,EACpC,KAAK,gBAAgB,EACrB,KAAK,UAAU,CACnB,CAdA,IAAI,SAAU,CACV,OAAI,KAAK,QAAQ,OAAS,EACf,KAAK,QAAQ,KAAK,QAAQ,OAAS,CAAC,EAGxCH,CACX,CAaA,WAAY,CACR,IAAMI,EAAW,KAAK,QAAQ,OAAS,EAAI,KAAK,QAAQ,KAAK,QAAQ,OAAS,CAAC,EAAI,GAC/E,OAAO,SAAS,MAAQA,IAI5B,KAAK,QAAQ,KAAK,OAAO,SAAS,IAAI,EACtC,KAAK,YAAY,EACrB,CAMA,gCAAiC,CAC7B,GAAI,KAAK,QAAQ,QAAU,EACvB,MAAO,GAGX,IAAMC,EAAY,KAAK,QAAQ,OAAS,EAQxC,OANIA,EAAY,GAMZ,EAFwB,KAAK,QAAQA,CAAS,GAAK,OAAO,SAAS,MAG5D,IAGX,KAAK,QAAU,KAAK,QAAQ,MAAM,EAAGA,CAAS,EAC9C,KAAK,YAAY,EACV,GACX,CAEA,YAAa,CACL,KAAK,mBAAmB,GACxB,KAAK,aAAa,EAGtB,IAAMC,EAAc,aAAa,QAAQP,CAAW,EAEpD,OAAIO,EACO,KAAK,MAAMA,CAAW,EAG1B,CAAC,CACZ,CAEA,aAAc,CACV,IAAMC,EAAc,KAAK,UAAU,KAAK,OAAO,EAC/C,aAAa,QAAQR,EAAaQ,CAAW,CACjD,CAEA,cAAe,CACX,KAAK,QAAU,CAAC,EAChB,KAAK,YAAY,CACrB,CAKA,iBAAkB,CACd,IAAMC,EAAiB,SAAS,eAAeP,CAAc,EAE7D,GAAKO,EAIL,CAAAA,EAAe,aAAa,OAAQ,KAAK,OAAO,EAEhD,IAAIC,EAAOC,EAAmB,GAAG,EACrC,CAEA,oBAAqB,CACjB,OAAO,OAAO,SAAS,UAAY,KAAO,OAAO,SAAS,UAAYV,CAC1E,CACJ,EAGA,SAASU,EAAmBC,EAAM,CAC9B,GAAKA,GAGA,GAAIA,EAAO,SACZ,MAAO,QAHP,OAAO,GAMX,MAAO,EACX,CAEA,IAAMC,EAASF,EAAmB,EAAI,EAChCG,EAAcH,EAAmB,EAAK,ECxH5C,IAAMI,EAAU,IAAIC",
  "names": ["STORAGE_KEY", "DEFAULT_ROUTE", "BACK_BUTTON_ID", "BrowserHistory", "__publicField", "lastHref", "lastIndex", "fromStorage", "stringified", "backButtonLink", "test", "testingDummyMethod", "bool", "result", "resultFalse", "history", "BrowserHistory"]
}
